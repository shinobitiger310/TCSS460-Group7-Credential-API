{
	"info": {
		"_postman_id": "auth2-service-collection",
		"name": "TCSS-460-auth-squared - Role Management Test",
		"description": "Test collection for TCSS-460-auth-squared focusing on admin role management functionality",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "1. Login as Admin",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test that login was successful",
							"pm.test(\"Login successful\", function () {",
							"    pm.response.to.have.status(200);",
							"    pm.expect(pm.response.json().success).to.be.true;",
							"});",
							"",
							"// Extract and save the JWT token",
							"if (pm.response.code === 200) {",
							"    const responseJson = pm.response.json();",
							"    const token = responseJson.data.accessToken;",
							"    ",
							"    // Save token to collection variable for use in subsequent requests",
							"    pm.collectionVariables.set(\"jwt_token\", token);",
							"    ",
							"    console.log(\"JWT token saved:\", token.substring(0, 50) + \"...\");",
							"    ",
							"    // Display user info",
							"    const user = responseJson.data.user;",
							"    console.log(\"Logged in as:\", user.name, user.lastname, \"(Role:\", user.role + \")\");",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"email\": \"admin@example.com\",\n  \"password\": \"admin123\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/auth/login",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"auth",
						"login"
					]
				},
				"description": "Login as an admin user to get JWT token. \n\n**Default credentials:**\n- Email: admin@example.com\n- Password: admin123\n\n**Update these values** in the request body with your actual admin credentials."
			},
			"response": []
		},
		{
			"name": "2. Get All Users (with filters)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Users retrieved successfully\", function () {",
							"    pm.response.to.have.status(200);",
							"    pm.expect(pm.response.json().success).to.be.true;",
							"});",
							"",
							"// Display users and their current roles",
							"if (pm.response.code === 200) {",
							"    const responseJson = pm.response.json();",
							"    const users = responseJson.data.users;",
							"    ",
							"    console.log(\"\\n=== Current Users ===\");",
							"    users.forEach((user, index) => {",
							"        console.log(`${index + 1}. ${user.firstName} ${user.lastName} (ID: ${user.id}) - Role: ${user.role} (${user.roleLevel})`);",
							"    });",
							"    ",
							"    // Show applied filters if any",
							"    if (responseJson.data.filters) {",
							"        console.log(\"\\nApplied filters:\", JSON.stringify(responseJson.data.filters, null, 2));",
							"    }",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/admin/users?page=1&limit=20",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"admin",
						"users"
					],
					"query": [
						{
							"key": "page",
							"value": "1"
						},
						{
							"key": "limit",
							"value": "20"
						},
						{
							"key": "status",
							"value": "active",
							"disabled": true
						},
						{
							"key": "role",
							"value": "1",
							"disabled": true
						}
					]
				},
				"description": "Get all users to see current roles. You can enable the disabled query parameters to test filtering:\n\n- `status`: Filter by account status (active, pending, suspended, locked, deleted)\n- `role`: Filter by role level (1-5)\n\nExample: Enable both filters to get only active users with role 1 (basic users)."
			},
			"response": []
		},
		{
			"name": "3. Change User Role",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Role change successful\", function () {",
							"    pm.response.to.have.status(200);",
							"    pm.expect(pm.response.json().success).to.be.true;",
							"});",
							"",
							"// Display role change details",
							"if (pm.response.code === 200) {",
							"    const responseJson = pm.response.json();",
							"    const user = responseJson.data.user;",
							"    const previousRole = responseJson.data.previousRole;",
							"    ",
							"    console.log(\"\\n=== Role Change Successful ===\");",
							"    console.log(`User: ${user.firstName} ${user.lastName} (ID: ${user.id})`);",
							"    console.log(`Previous Role: ${previousRole.role} (${previousRole.roleLevel})`);",
							"    console.log(`New Role: ${user.role} (${user.roleLevel})`);",
							"    console.log(`Message: ${responseJson.message}`);",
							"} else {",
							"    console.log(\"Role change failed:\", pm.response.json().message);",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"role\": 2\n}"
				},
				"url": {
					"raw": "{{base_url}}/admin/users/{{target_user_id}}/role",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"admin",
						"users",
						"{{target_user_id}}",
						"role"
					]
				},
				"description": "Change a user's role. \n\n**Setup required:**\n1. Update `target_user_id` in the URL path with actual user ID\n2. Update `role` in request body with desired role level:\n   - 1: User\n   - 2: Moderator\n   - 3: Admin\n   - 4: SuperAdmin\n   - 5: Owner\n\n**Role Hierarchy Rules:**\n- Admin (3) can assign roles 1-3\n- SuperAdmin (4) can assign roles 1-4\n- Cannot change your own role\n- Cannot promote to higher role than your own"
			},
			"response": []
		},
		{
			"name": "4. Test Role Promotion to Admin Level",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Admin can promote to admin level\", function () {",
							"    pm.response.to.have.status(200);",
							"    pm.expect(pm.response.json().success).to.be.true;",
							"});",
							"",
							"// Verify the role was changed to admin (role 3)",
							"if (pm.response.code === 200) {",
							"    const responseJson = pm.response.json();",
							"    const user = responseJson.data.user;",
							"    ",
							"    pm.test(\"User promoted to Admin role\", function () {",
							"        pm.expect(user.roleLevel).to.equal(3);",
							"        pm.expect(user.role).to.equal(\"Admin\");",
							"    });",
							"    ",
							"    console.log(\"\\n=== Admin Promotion Test Successful ===\");",
							"    console.log(`${user.firstName} ${user.lastName} successfully promoted to ${user.role}`);",
							"} else {",
							"    console.log(\"Admin promotion failed:\", pm.response.json().message);",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"role\": 3\n}"
				},
				"url": {
					"raw": "{{base_url}}/admin/users/{{target_user_id}}/role",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"admin",
						"users",
						"{{target_user_id}}",
						"role"
					]
				},
				"description": "**Test the fix:** Admin promoting user to Admin level (role 3)\n\nThis tests that admins can now promote users to their own role level, which was the issue you reported. Before the fix, this would fail with \"Cannot promote user to equal or higher role than your own\".\n\n**Expected result:** Success ✅\n\n**Setup:** Update `target_user_id` with a valid user ID from the user list."
			},
			"response": []
		},
		{
			"name": "5. Test Invalid Promotion (Should Fail)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Invalid promotion correctly blocked\", function () {",
							"    pm.response.to.have.status(403);",
							"    pm.expect(pm.response.json().success).to.be.false;",
							"});",
							"",
							"// Verify the correct error message",
							"if (pm.response.code === 403) {",
							"    const responseJson = pm.response.json();",
							"    console.log(\"\\n=== Security Test Passed ===\");",
							"    console.log(\"Admin correctly blocked from promoting to SuperAdmin\");",
							"    console.log(\"Error message:\", responseJson.message);",
							"} else {",
							"    console.log(\"Unexpected response:\", pm.response.json());",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"role\": 4\n}"
				},
				"url": {
					"raw": "{{base_url}}/admin/users/{{target_user_id}}/role",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"admin",
						"users",
						"{{target_user_id}}",
						"role"
					]
				},
				"description": "**Security test:** Admin trying to promote user to SuperAdmin (role 4)\n\nThis should fail because admins cannot promote users to roles higher than their own.\n\n**Expected result:** 403 Forbidden ❌\n**Expected message:** \"Cannot promote user to higher role than your own\""
			},
			"response": []
		},
		{
			"name": "6. Search Users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Search successful\", function () {",
							"    pm.response.to.have.status(200);",
							"    pm.expect(pm.response.json().success).to.be.true;",
							"});",
							"",
							"// Display search results",
							"if (pm.response.code === 200) {",
							"    const responseJson = pm.response.json();",
							"    const users = responseJson.data.users;",
							"    ",
							"    console.log(\"\\n=== Search Results ===\");",
							"    console.log(`Search term: \"${responseJson.data.searchTerm}\"`);",
							"    console.log(`Fields searched: ${responseJson.data.fieldsSearched.join(\", \")}`);",
							"    console.log(`Found ${responseJson.data.pagination.totalUsers} users:`);",
							"    ",
							"    users.forEach((user, index) => {",
							"        console.log(`${index + 1}. ${user.firstName} ${user.lastName} (${user.email}) - ${user.role}`);",
							"    });",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/admin/users/search?q=test&fields=email,username&page=1&limit=10",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"admin",
						"users",
						"search"
					],
					"query": [
						{
							"key": "q",
							"value": "test",
							"description": "Search term - update with actual search text"
						},
						{
							"key": "fields",
							"value": "email,username",
							"description": "Fields to search (firstname,lastname,username,email)"
						},
						{
							"key": "page",
							"value": "1"
						},
						{
							"key": "limit",
							"value": "10"
						}
					]
				},
				"description": "Search for users by name, email, or username.\n\n**Parameters:**\n- `q`: Search term (required)\n- `fields`: Comma-separated fields to search (optional, default: all)\n- `page`: Page number (optional, default: 1)\n- `limit`: Results per page (optional, default: 20, max: 100)\n\n**Update the `q` parameter** with your actual search term."
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Set default base URL if not already set",
					"if (!pm.collectionVariables.get(\"base_url\")) {",
					"    pm.collectionVariables.set(\"base_url\", \"http://localhost:8000\");",
					"}",
					"",
					"// Set default target user ID if not already set",
					"if (!pm.collectionVariables.get(\"target_user_id\")) {",
					"    pm.collectionVariables.set(\"target_user_id\", \"2\");",
					"}"
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8000",
			"type": "string",
			"description": "Base URL for the Auth² Service API"
		},
		{
			"key": "jwt_token",
			"value": "",
			"type": "string",
			"description": "JWT token from login (automatically set)"
		},
		{
			"key": "target_user_id",
			"value": "2",
			"type": "string",
			"description": "User ID to modify (update with actual user ID)"
		}
	]
}